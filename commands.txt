Useful Composer + Laravel Commands + MySQL commands ::

1. composer create-project laravel/laravel {project_name}
    Tells Composer to download the "laravel/laravel" library and CREATE a NEW Laravel
    project inside the NEW folder named: "project_name"

2. php artisan serve
    Tells php to run the "artisan" CLI executable and if that runs inside a Laravel
    projects it spins up a Local Development server at "localhost:8000"

3. php artisan make:controller {controller_name}
    Tells artisan to CREATE a new Controller at location "app/Http/{controller_name}

4. php artisan view:clear
    Clears the CACHED Views in Laravel (so any changes, change indeed imediatly)

5. sudo /usr/local/mysql/support-files/mysql.server [start/stop]
    Starts or Stops a MySQL Server

6. php artisan migrate
    Tells Artisan to migrate all database files inside of "database/migrations/" folder

7. php artisan migrate:fresh
    DROPs everything in the connected database and migrates again

8. php artisan make:migration {migration_name}
    Creates a new migration DB file inside of "database/migrations/" folder

9. php artisan make:model {model_name}
    Creates a new Model at location "app/Models/{model_name}"

10. php artisan make:middleware {middleware_name}
    Creates a new Middleware at location "app/Http/Middleware/{middleware_name}

11. php artisan make:policy {policy_name} --model={model_name}
    Creates a new Policy named {policy_name} which is tied to the Model {model_name}
    at location "app/Policies/{policy_name}"
    (When making a Policy like that Laravel automatically Registers it for us)

12. php artisan make:migration {migration_name} --table={table_name}
    Creates a new Migration ON TOP of an existing table called {table_name}

13. php artisan storage:link
    Creates a shortcut of "storage" folder (where all uploaded stuff go - but is not publicly accessible)
    under the "public" folder (which is publicly accessible) so that uploaded files can also exist inside
    a public to the web folder for further use.

14. php artisan db:seed
    This db:seed command will simply add new items to your tables but will 
    not edit or delete any of your existing data.

15. php artisan migrate:fresh --seed
    This command will completely erase all of your tables and data, then use your migration 
    files to re-build all the tables, and finally use our seed data to populate the tables.

16. php artisan vendor:publish --provider="Laravel\Scout\ScoutServiceProvider" 
    It defined as project's provider the Laravel's Scout (it needs to be downloaded with composer first)

17. npm install
    Uses NodeJS's npm to install all packages inside "package.json"

18. npm run dev 
    Starts a dev server that watches for any real-time changes and applies them to our app

19. npm run build 
    It builds the up-to-here steps we made to the app (like a checkpoint) so that we dont needs
    "npm run dev" active to see changes up-to-here.

20. php artisan make:event {event_name}
    Creates an Event at location "app/Events/{event_name}" named {event_name}

21. php artisan make:listener {listener_name}
    Creates a Listener at location "app/Listeners/{listener_name}" named {listener_name}

22. php artisan db:show
    Display information about the current DB

23. php artisan make:factory {factory_name}
    Creates a Factory named {factory_name} under "database/factories/{factory_name}"

24. php artisan make:model {model_name} -m
    Creates a Model {model_name} and because we mentioned "-m" it will also create a Migration

25. php artisan make:model {model_name} -mf
    Creates the Model {model_name} and also a Migration + a Factory for it.

26. PRAGMA foreign_keys=ON
    Inside of our SQL GUI if we run this we ENFORCE ALL the constrains to be active.
    (In case where they were not enforced by default)

27. php artisan vendor:publish
    Allows us to extract styling files from vendor folder to our main "resource/vendor" folder
    so that we can edit them manually if we want to

28. php artisan db:seed
    Populates the Database with many dummy records we set up.

29. php artisan migrate:fresh --seed
    It Empties the Database and Then runs "db:seed"

30. php artisan make:seeder {seeder_name}
    It creates a new seeder file under "database/seeders/{seeder_name}"

31. php artisan db:seed --class={seeder_name}
    Populates the Database ONLY with the specified seeder class information.

32. php artisan route:list
    It will list all available Routes of the Application

33. php artisan route:list --except-vendor
    It will list all available Routes of the Application EXCEPT those from vendors.

34. php artisan make:policy {policy_name} -m {model_name}
    Creates a polict at location "app/policies/{policy_name}" connected to Model {model_name}

35. php artisan make:mail {mail_name}
    Generates a mailable at "app/Mail/{mail_name}"

36. php artisan queue:work
    Creates workers for the jobs in the queue

37. php artisan make:jobs {job_name}
    Creates a new job named {job_name}

38. php artisan make:test {test_name}
    Creates a Test {test_name} at location "tests/(Feature|Unit)/{test_name}

39. 